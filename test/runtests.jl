using UnsupervisedClustering

using Aqua
using DelimitedFiles
using Distances
using LinearAlgebra
using Printf
using Random
using RegularizedCovarianceMatrices
using Test
using TimerOutputs

function get_data(filename::String)
    open(joinpath("data", "$filename.csv")) do file
        table = readdlm(file, ',')
        n = size(table, 1)

        clusters = Set{Int}()
        for i in 1:n
            expected = Int(table[i, 1])
            push!(clusters, expected)
        end
        k = length(clusters)

        return table[:, 2:size(table, 2)], k
    end
end

function test_all()
    reset_timer!()

    @testset "Aqua.jl" begin
        @testset "ambiguities" begin
            Aqua.test_ambiguities(UnsupervisedClustering, recursive = false)
        end
        Aqua.test_all(UnsupervisedClustering, ambiguities = false)
    end

    verbose = true

    datasets = Dict(
        "3_5_-0.26_1" => [154957.1261776057945099,145171.0541117230604868,145171.0541117230604868,145171.0541117230604868,170734.2684244557167403,156312.0316052992711775,156312.0316052992711775,156312.0316052992711775,-19.0388542112063419,-18.8328066566055341,-18.9884454528302733,-18.7837595306778304,-19.1028506710508310,-19.0532506533084245,-19.0520714903802961,-19.0531310852587268,-19.0597497790508150,-19.0085782040028626,-19.0055811176914489,-19.0051500822511130,-19.0597497790508115,-19.0085782040028697,-19.0055811176914524,-19.0051500822511130,],
        "3_10_-0.1_1" => [268204.0762298569898121,268172.9332773343194276,268172.9332773343194276,268172.9332773343194276,325950.5801660600118339,306392.2279977732687257,306392.2279977732687257,306392.2279977732687257,-36.0703183590430427,-35.8057508654170960,-34.6583960421335036,-35.4812643192373400,-36.1509377329520021,-36.1505595153009622,-36.1503935532764658,-36.1506991551319672,-36.0842675133474842,-36.0841406229986745,-36.0841481516946843,-36.0841325669944339,-36.0842675133474984,-36.0841406229986887,-36.0841481516946985,-36.0841325669944553,],
        "3_20_-0.1_1" => [716442.5211556990398094,716102.1900860873283818,716116.9963649909477681,716102.1900860873283818,936671.0275533118983731,855809.9187766498653218,855809.9187766498653218,855809.9187766498653218,-74.0838279747994335,-69.9351378770142844,-69.2984036447048055,-69.3707243112462635,-74.2084104047727635,-73.5730360817370581,-73.5729289283472383,-73.5729571328639196,-74.2882471888903666,-73.5917310390300941,-74.0103306250959889,-73.5911660346668270,-74.2882471888903666,-73.5917310390300941,-74.0103306250959889,-73.5911660346667986,],
        "3_2_0.01_1" => [75954.5837682041164953,75940.7629553540755296,75940.7629553540755296,75940.7629553540755296,77146.2837541921326192,77146.2837541921326192,77146.2837541921326192,77146.2837541921326192,-8.5182010741651464,-8.5180695452986246,-8.5179945671259869,-8.5180195914592289,-8.5303361286472086,-8.5284001098557525,-8.5284964329609849,-8.5284001098557525,-8.5224293187677915,-8.5214578069181197,-8.5215839382927161,-8.5214578069181144,-8.5224293187677969,-8.5214578069181126,-8.5215839382927054,-8.5214578069181091,],
        "3_10_0.01_1" => [301283.3591094072326086,301237.3496410869993269,301237.3496410869993269,301237.3496410869993269,334993.1816868182504550,334993.1816868182504550,334993.1816868182504550,334993.1816868182504550,-36.7163337885938503,-36.3695289587340440,-36.3064552432951331,-36.3169652359133082,-36.7938458384438647,-36.7937844420940223,-36.7937668053230880,-36.7938159992672169,-36.7309917532060410,-36.7221282839724452,-36.7220172921167958,-36.7220257423311551,-36.7309917532060410,-36.7221282839724665,-36.7220172921168242,-36.7220257423311978,],
        "3_5_0.21_1" => [115214.8964348844019696,115205.1984080591792008,115205.1984080591792008,115205.1984080591792008,120734.2042795864981599,120734.2042795864981599,120734.2042795864981599,120734.2042795864981599,-18.3813180045590627,-18.3813150632202316,-18.3813149727706957,-18.3813151801255295,-18.3998258408313404,-18.3994949425985297,-18.3995389415453268,-18.3994949425985297,-18.3819490618048427,-18.3819245532406832,-18.3819286816425418,-18.3819273834290549,-18.3819490618048427,-18.3819245532406796,-18.3819286816425347,-18.3819273834290513,],
        "3_10_0.21_1" => [352671.5722019831300713,352671.5722019831300713,352671.5722019831300713,352671.5722019831300713,438730.2076053912751377,438730.2076053912751377,438730.2076053912751377,438730.2076053912751377,-37.8081674247661539,-37.8080185613217665,-37.6348986943267221,-37.6989344784339764,-37.9048639684855857,-37.9048480603149187,-37.9048505569886203,-37.9048517775397613,-37.8125607242538777,-37.8124983759565225,-37.8124989488110046,-37.8124993144694272,-37.8125607242538919,-37.8124983759565367,-37.8124989488110472,-37.8124993144694486,],
        "3_20_-0.26_1" => [622007.9246746967546642,621695.1380325681529939,621546.1170849310001358,621510.9083132183877751,785298.8572100675664842,747702.4164905139477924,750297.2594066882738844,747702.4164905139477924,-73.2924242356142344,-69.0596726977707220,-67.7651941290768463,-67.7947590568270329,-73.0261462058717257,-72.9095062944623464,-72.8476015576255094,-72.7779192420338745,-73.6087451916373539,-73.0460482463311251,-73.1049243269147269,-73.0653393833928959,-73.6087451916373112,-73.0460482463311251,-73.1049243269147127,-73.0653393833928959,],
        "3_10_-0.26_1" => [336947.4319684674264863,336748.1363485666224733,336694.4416484995745122,336683.5811427894514054,381080.1344687577220611,371521.2336056476342492,372915.9188730129972100,371521.2336056476342492,-37.6586282576445228,-36.3236296321874264,-36.2064259144613274,-36.4039995960011922,-37.7115219945635047,-37.6547302061985363,-37.6659613196237970,-37.6521812809327869,-37.7459075116256884,-37.6304392960075944,-37.6056899271404745,-37.6360389084265279,-37.7459075116256670,-37.6304392960075873,-37.6056899271404745,-37.6360389084265350,],
        "3_20_0.21_1" => [687937.3633403786225244,574657.8239689305191860,574657.8239689305191860,574657.8239689305191860,878969.7630383454961702,762234.0950123307993636,762234.0950123307993636,762234.0950123307993636,-72.6467244560655132,-68.9071164505417926,-67.7789318678429424,-67.8614128110218076,-72.9171836688065582,-71.4610703591285272,-71.4610614896789116,-71.4610617030276813,-72.7275301299009840,-71.1059605431080826,-71.8402227852306936,-71.1059606270354010,-72.7275301299009982,-71.1059605431081252,-71.8402227852306794,-71.1059606270353726,],
        "3_5_0.01_1" => [186156.1504602948843967,186118.1492456819978543,186118.1492456819978543,186118.1492456819978543,253687.1892723692290019,196389.1341025998990517,196389.1341025998990517,196389.1341025998990517,-19.8168685933069781,-19.8150275517706582,-19.8149994844554058,-19.8150275517706582,-19.8333402065971569,-19.8304446961183736,-19.8304475443417161,-19.8304999064768701,-19.8174966975787434,-19.8159343890310353,-19.8159799900275750,-19.8159613446582732,-19.8174966975787363,-19.8159343890310389,-19.8159799900275750,-19.8159613446582696,],
        "3_20_0.01_1" => [1070883.7245843189302832,1070027.2639505288098007,1070027.2639505288098007,1070027.2639505288098007,1377489.1952040882315487,1322856.7126853447407484,1319611.5028715548105538,1319611.5028715548105538,-77.0737574418237017,-72.7987379924843481,-73.5941916025601870,-72.6205622945740714,-76.1407495253517226,-76.1348151745531823,-76.1329351264368199,-76.1329481574661742,-76.2264520918900672,-76.1257002883629070,-76.1233153917285961,-76.1232827114588133,-76.2264520918900530,-76.1257002883629070,-76.1233153917286103,-76.1232827114587991,],
        "3_5_-0.1_1" => [275487.8841434057103470,267607.4271683744736947,267607.4271683744736947,267607.4271683744736947,322233.2297199374879710,283495.7735194113338366,283495.7735194113338366,283495.7735194113338366,-20.4349068112379193,-20.2523865092810240,-20.3404022473277735,-19.9787867582406520,-20.3891289410647367,-20.3549306448531908,-20.3547753355716594,-20.3548885634430903,-20.3823698522648336,-20.3462308760394244,-20.3460612030407724,-20.3461989871467708,-20.3823698522648407,-20.3462308760394279,-20.3460612030407724,-20.3461989871467885,],
        "3_2_-0.1_1" => [59601.5900345181653393,59567.5943560912564863,59567.5943560912564863,59567.5943560912564863,60439.0608680820660084,60439.0608680820660084,60439.0608680820660084,60439.0608680820660084,-8.4129801329858616,-8.4100742244496427,-8.4100174714808258,-8.4099366090680689,-8.4134043055056758,-8.4114234980061706,-8.4114980684277771,-8.4115748798663681,-8.4125172640617674,-8.4107229931017358,-8.4105243754837478,-8.4105907588185556,-8.4125172640617567,-8.4107229931017304,-8.4105243754837531,-8.4105907588185556,],
        "3_2_-0.26_1" => [26426.4752462552678480,26399.3161993783432990,26399.3161993783432990,26399.3161993783432990,32029.8684217827067187,26654.1405923047641409,26654.1405923047641409,26654.1405923047641409,-7.4669181592793743,-7.4494816549227956,-7.4482634783382657,-7.4483885678501291,-7.4698241250226749,-7.4520829068685925,-7.4512318851167203,-7.4511838164108983,-7.4674296693871653,-7.4496009822932212,-7.4488021103966711,-7.4490703702205856,-7.4674296693871627,-7.4496009822932230,-7.4488021103966746,-7.4490703702205909,],
        "3_2_0.21_1" => [54050.7068362436621101,54050.7068362436621101,54050.7068362436621101,54050.7068362436621101,54294.3046370888041565,54294.3046370888041565,54294.3046370888041565,54294.3046370888041565,-8.2262549104633234,-8.2262468195781722,-8.2262463074227643,-8.2262457841869097,-8.2303749097041141,-8.2297365822164590,-8.2299766587398970,-8.2299269129342569,-8.2268582216710495,-8.2267398630209936,-8.2267955374119683,-8.2267015554266170,-8.2268582216710477,-8.2267398630209865,-8.2267955374119666,-8.2267015554266152,],    
    )

    for (dataset, benchmark) in datasets
        data, k = get_data(dataset)
        n, d = size(data)

        kmeans = Kmeans(
            verbose = verbose, 
            rng = MersenneTwister(1),
        )
        kmedoids = Kmedoids(
            verbose = verbose, 
            rng = MersenneTwister(1),
        )
        gmm = GMM(
            verbose = verbose, 
            rng = MersenneTwister(1),
            estimator = EmpiricalCovarianceMatrix(n, d),
        )
        gmm_shrunk = GMM(
            verbose = verbose, 
            rng = MersenneTwister(1),
            estimator = ShrunkCovarianceMatrix(n, d),
        )
        gmm_oas = GMM(
            verbose = verbose, 
            rng = MersenneTwister(1),
            estimator = LedoitWolfCovarianceMatrix(n, d),
        )
        gmm_lw = GMM(
            verbose = verbose, 
            rng = MersenneTwister(1),
            estimator = LedoitWolfCovarianceMatrix(n, d),
        )

        algorithms = [
            # KMEANS
            kmeans,
            MultiStart(local_search = kmeans, verbose = verbose),
            RandomSwap(local_search = kmeans, verbose = verbose),
            GeneticAlgorithm(local_search = kmeans, verbose = verbose),
            # KMEDOIDS
            kmedoids,
            MultiStart(local_search = kmedoids, verbose = verbose),
            RandomSwap(local_search = kmedoids, verbose = verbose),
            GeneticAlgorithm(local_search = kmedoids, verbose = verbose),
            # GMM EMPIRICAL
            gmm,
            MultiStart(local_search = gmm),
            RandomSwap(local_search = gmm, verbose = verbose),
            GeneticAlgorithm(local_search = gmm, verbose = verbose),
            # # GMM SHRUNK
            gmm_shrunk,
            MultiStart(local_search = gmm_shrunk),
            RandomSwap(local_search = gmm_shrunk, verbose = verbose),
            GeneticAlgorithm(local_search = gmm_shrunk, verbose = verbose),
            # GMM OAS
            gmm_oas,
            MultiStart(local_search = gmm_oas, verbose = verbose),
            RandomSwap(local_search = gmm_oas, verbose = verbose),
            GeneticAlgorithm(local_search = gmm_oas, verbose = verbose),
            # GMM LW
            gmm_lw,
            MultiStart(local_search = gmm_lw, verbose = verbose),
            RandomSwap(local_search = gmm_lw, verbose = verbose),
            GeneticAlgorithm(local_search = gmm_lw, verbose = verbose),
        ]

        # @printf("\"%s\" => [", dataset)
        for (i, algorithm) in enumerate(algorithms)
            UnsupervisedClustering.seed!(algorithm, 1)
            result = UnsupervisedClustering.fit(algorithm, data, k)
            # @printf("%.16f,", result.objective)

            @test result.objective ≈ benchmark[i]
        end
        # @printf("],\n")
    end

    print_timer(sortby = :firstexec)

    return
end

test_all()
